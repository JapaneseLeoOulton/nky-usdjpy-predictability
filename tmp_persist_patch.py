from pathlib import Path
import math

path = Path('src/pipeline_runner.py')
text = path.read_text()
old = "    def persist_results(\n        self,\n        result: FinalModelResult,\n        preds_test: pd.Series,\n        y_test: pd.Series,\n        strategy_df: pd.DataFrame,\n        top_models: List[CVResult],\n        all_cv: List[CVResult],\n    ) -> None:\n        name_tag = f\"{result.feature_subset}_{'win' if result.winsorize else 'raw'}_{result.name}\"\n        preds_path = config.MODEL_DIR / f\"predictions_{name_tag}.csv\"\n        summary_path = config.MODEL_DIR / f\"summary_{name_tag}.json\"\n        cv_path = config.MODEL_DIR / f\"cv_metrics_{name_tag}.json\"\n        preds_df = pd.DataFrame({\"actual\": y_test, \"prediction\": preds_test})\n        preds_df.index.name = \"Date\"\n        preds_df.to_csv(preds_path)\n        summary_payload = {\n            \"model\": result.name,\n            \"feature_subset\": result.feature_subset,\n            \"winsorize\": result.winsorize,\n            \"lag_depth\": result.lag_depth,\n            \"params\": result.params,\n            \"test_metrics\": {\n                \"rmse\": result.metrics_test.rmse if result.metrics_test else None,\n                \"mae\": result.metrics_test.mae if result.metrics_test else None,\n                \"oos_r2_vs_rw\": result.metrics_test.r2_oos if result.metrics_test else None,\n                \"bias\": result.metrics_test.bias if result.metrics_test else None,\n            },\n            \"directional_accuracy\": {\n                \"point\": result.directional_test[0] if result.directional_test else None,\n                \"lower\": result.directional_test[1] if result.directional_test else None,\n                \"upper\": result.directional_test[2] if result.directional_test else None,\n            },\n            \"economic\": {\n                \"cum_return\": result.economic.cumulative_return if result.economic else None,\n                \"max_drawdown\": result.economic.max_drawdown if result.economic else None,\n                \"sharpe\": result.economic.sharpe if result.economic else None,\n                \"turnover\": result.economic.turnover if result.economic else None,\n                \"hit_rate\": result.economic.hit_rate if result.economic else None,\n            },\n            \"clark_west_vs_ctrl\": result.clark_west_vs_ctrl,\n            \"clark_west_vs_ar\": result.clark_west_vs_ar,\n            \"residual_stats\": result.residual_stats,\n        }\n        with open(summary_path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(summary_payload, f, indent=2)\n        cv_payload = []\n        for cv in all_cv:\n            cv_payload.append(\n                {\n                    \"model\": cv.model_name,\n                    \"params\": cv.params,\n                    \"median_rmse\": cv.median_rmse,\n                    \"mean_rmse\": cv.mean_rmse,\n                    \"mean_mae\": cv.mean_mae,\n                    \"mean_r2\": cv.mean_r2,\n                    \"mean_directional\": cv.mean_directional,\n                    \"folds\": [\n                        {\n                            \"fold_id\": fold.fold_id,\n                            \"start\": fold.start,\n                            \"end\": fold.end,\n                            \"rmse\": fold.rmse,\n                            \"mae\": fold.mae,\n                            \"r2\": fold.r2,\n                            \"directional\": fold.directional_acc,\n                        }\n                        for fold in cv.fold_details\n                    ],\n                }\n            )\n        with open(cv_path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(cv_payload, f, indent=2)\n        strat_path = config.MODEL_DIR / f\"strategy_{name_tag}.csv\"\n        strategy_df.to_csv(strat_path)\n"
new = "    def persist_results(\n        self,\n        result: FinalModelResult,\n        preds_test: pd.Series,\n        y_test: pd.Series,\n        strategy_df: pd.DataFrame,\n        top_models: List[CVResult],\n        all_cv: List[CVResult],\n    ) -> None:\n        def _clean(value):\n            if isinstance(value, float):\n                return None if math.isnan(value) else value\n            if isinstance(value, dict):\n                return {k: _clean(v) for k, v in value.items()}\n            if isinstance(value, list):\n                return [_clean(v) for v in value]\n            return value\n\n        name_tag = f\"{result.feature_subset}_{'win' if result.winsorize else 'raw'}_{result.name}\"\n        preds_path = config.MODEL_DIR / f\"predictions_{name_tag}.csv\"\n        summary_path = config.MODEL_DIR / f\"summary_{name_tag}.json\"\n        cv_path = config.MODEL_DIR / f\"cv_metrics_{name_tag}.json\"\n        preds_df = result.predictions.copy() if result.predictions is not None else pd.DataFrame({\"actual\": y_test, \"prediction\": preds_test})\n        preds_df.index.name = \"Date\"\n        preds_df.to_csv(preds_path)\n        summary_payload = {\n            \"model\": result.name,\n            \"feature_subset\": result.feature_subset,\n            \"winsorize\": result.winsorize,\n            \"lag_depth\": result.lag_depth,\n            \"params\": result.params,\n            \"test_metrics\": {\n                \"rmse\": result.metrics_test.rmse if result.metrics_test else None,\n                \"mae\": result.metrics_test.mae if result.metrics_test else None,\n                \"oos_r2_vs_rw\": result.metrics_test.r2_oos if result.metrics_test else None,\n                \"bias\": result.metrics_test.bias if result.metrics_test else None,\n            },\n            \"directional_accuracy\": {\n                \"point\": result.directional_test[0] if result.directional_test else None,\n                \"lower\": result.directional_test[1] if result.directional_test else None,\n                \"upper\": result.directional_test[2] if result.directional_test else None,\n            },\n            \"economic\": {\n                \"cum_return\": result.economic.cumulative_return if result.economic else None,\n                \"max_drawdown\": result.economic.max_drawdown if result.economic else None,\n                \"sharpe\": result.economic.sharpe if result.economic else None,\n                \"turnover\": result.economic.turnover if result.economic else None,\n                \"hit_rate\": result.economic.hit_rate if result.economic else None,\n            },\n            \"classifier\": {\n                \"cv\": result.classifier_cv,\n                \"test\": result.classifier_test,\n            },\n            \"top_models_cv\": [\n                {\n                    \"model\": tm.model_name,\n                    \"params\": tm.params,\n                    \"median_rmse\": tm.median_rmse,\n                }\n                for tm in top_models\n            ],\n            \"clark_west_vs_ctrl\": result.clark_west_vs_ctrl,\n            \"clark_west_vs_ar\": result.clark_west_vs_ar,\n            \"residual_stats\": result.residual_stats,\n        }\n        summary_payload = _clean(summary_payload)\n        with open(summary_path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(summary_payload, f, indent=2)\n        cv_payload = []\n        for cv in all_cv:\n            cv_payload.append(\n                {\n                    \"model\": cv.model_name,\n                    \"params\": cv.params,\n                    \"median_rmse\": cv.median_rmse,\n                    \"mean_rmse\": cv.mean_rmse,\n                    \"mean_mae\": cv.mean_mae,\n                    \"mean_r2\": cv.mean_r2,\n                    \"mean_directional\": cv.mean_directional,\n                    \"folds\": [\n                        {\n                            \"fold_id\": fold.fold_id,\n                            \"start\": fold.start,\n                            \"end\": fold.end,\n                            \"rmse\": fold.rmse,\n                            \"mae\": fold.mae,\n                            \"r2\": fold.r2,\n                            \"directional\": fold.directional_acc,\n                        }\n                        for fold in cv.fold_details\n                    ],\n                }\n            )\n        cv_payload = _clean(cv_payload)\n        with open(cv_path, \"w\", encoding=\"utf-8\") as f:\n            json.dump(cv_payload, f, indent=2)\n        strat_path = config.MODEL_DIR / f\"strategy_{name_tag}.csv\"\n        strategy_df.to_csv(strat_path)\n        if result.classifier_predictions is not None:\n            classifier_path = config.MODEL_DIR / f\"classifier_{name_tag}.csv\"\n            result.classifier_predictions.to_csv(classifier_path)\n"\nif old not in text:
    raise SystemExit('persist_results definition mismatch')
text = text.replace(old, new)
path.write_text(text)
